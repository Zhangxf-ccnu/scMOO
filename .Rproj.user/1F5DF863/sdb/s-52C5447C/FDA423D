{
    "collab_server" : "",
    "contents" : "---\ntitle: \"scMOO-tutorial\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{scMOO-tutorial}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n\n```{r, include = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#>\"\n)\n```\n## 1. Installation\nStep 1. If the \"devtools\" package has not been installed, install the \"devtools\" package first.\n```{r setup, eval=FALSE}\ninstall.packages(\"devtools\")\n```\nStep 2. Install the \"scMOO\" package from GitHub.\n```{r install, eval=FALSE}\ndevtools::install_github(\"Zhangxf-ccnu/scMOO\", subdir=\"pkg\")\n```\n## 2. Quick Start\nTo perform imputation, simply run:\n```{r scmoo, eval=FALSE}\nlibrary(scMOO)\ndata(PBMC_CL)\nresult <- scMOO(PBMC_CL, percent=0, verbose=TRUE, estimates.only=FALSE)\n```\nHere we use PBMC_CL dataset used in the cell clustering analysis as an example. Note that the PBMC_CL dataset has been preporcessed using Seurat with 2,000 selected highly variable genes and whose column names are true cell labels.  \n&nbsp;&nbsp;&nbsp;&nbsp;`percent`: The expression count matrix is preprocessed by filtering out the genes expressed in at most percent*100\\% of the cells. In the above example, we set `percent=0` for that we have selected 2,000 highly variable genes.    \n&nbsp;&nbsp;&nbsp;&nbsp;`verbose`: Whether to output the value of metrics at the end of each epoch. Default is TRUE.   \n&nbsp;&nbsp;&nbsp;&nbsp;`estimates.only`: If `estimates.only = TRUE`, `scMOO()` returns a matrix of scMOO estimates;   \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;                  If `estimates.only = FALSE`, `scMOO()` returns the following list of values:      \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; `estimate`: Recovered (normalized) expression.   \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; `size.factor`: Size factor used for normalization.   \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; `pred.time`: Total time for scMOO estimate.   \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; `alpha`: Tuning parameter to balance the error between the imputed and observed data &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and the eror of model fitting data.    \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; `w`: The combination weights $\\omega_{1}$, $\\omega_{2}$ and $\\omega_{3}$.\n\n## 3. Downstream analysis: Cell clustering \n### 3.1 Selecting highly variable genes before imputation\n```{r hvgs, eval=FALSE}\nlibrary(Seurat)\nx.seurat <- CreateSeuratObject(raw_data) ## colnames of data are ture cell labels\nx.seurat <- NormalizeData(x.seurat)\nx.seurat <- ScaleData(x.seurat)\nx.seurat <- FindVariableFeatures(x.seurat, verbose = FALSE)\n\nfilter_ID <- x.seurat@assays$RNA@var.features\ndata_hvgs <- data[filter_ID,]\n```\nThrough 3.1, we can obtain PBMC_CL dataset with 2,000 highly variable genes before imputation.      \n\n### 3.2 Imputing dropouts using scMOO\n```{r imputation, eval=FALSE}\nlibrary(scMOO)\nresult <- scMOO(PBMC_CL,  percent=0, estimate.only=TRUE)\n```\nBy setting `estimate.only=TRUE`, we can obtain a matrix of scMOO estimates.\n\n### 3.3 Performing cell clustering using SC3\n```{r sc3, eval=FALSE}\nlibrary(SingleCellExperiment)\nlibrary(SC3)\nlibrary(mclust)\nlibrary(aricode)\n\nsce <- SingleCellExperiment(\n  assays = list(\n    counts = as.matrix(result),\n    logcounts = log2(as.matrix(result) + 1)\n  ), \n  colData = colnames(result)\n)\n\n\nrowData(sce)$feature_symbol <- rownames(sce)\n\nlabel <- colnames(result)\n\nK <- length(unique(label))\n\n\nresult <- sc3(sce, ks = K, gene_filter = FALSE) \n\nARI <- adjustedRandIndex(label, result@colData@listData$sc3_6_clusters) #### '6' in 'sc3_6_clusters' is consistant, and equals to the number of cell types \n\nNMI <- NMI(result@colData@listData$sc3_6_clusters, label)\n\n```\nWe first perform cell lustering using `SC3` on the imputed results. The R package\n`SC3` is for implementing `SC3`, and the parameter `ks`, which determines\nthe number of clusters, is chosen as the known number of cell types. Here `ks` is set as 6 on the PBMC_CL dataset.  \nTo compare the clustering results, we use the **Adjusted Rand Index**\n(ARI) and the **Normalized Mutual Information** (NMI) to evaluate the\nconsistency between the results of `SC3` and the reference labels\nof cells. The closer the indexes of **ARI** and **NMI** are to 1, the better the\nclustering results will be.\n\n### 3.4 Performing cell clustering using Seurat\n```{r seurat, eval=FALSE}\nlibrary(Seurat)\nx.seurat <- CreateSeuratObject(result) \nx.seurat <- NormalizeData(x.seurat)\nx.seurat <- ScaleData(x.seurat)\nx.seurat <- FindVariableFeatures(x.seurat, verbose = FALSE)\n\nx.seurat <- RunPCA(x.seurat, features = VariableFeatures(object = x.seurat))  \nx.seurat <- JackStraw(x.seurat, num.replicate = 100)\nx.seurat <- ScoreJackStraw(x.seurat, dims = 1:20)\nx.seurat <- FindNeighbors(x.seurat, dims = 1:10)\nx.seurat <- FindClusters(x.seurat, resolution = 0.5)\n\nlabel <- colnames(result)\n\nARI <- adjustedRandIndex(as.factor(label), x.seurat$seurat_clusters)\n\nNMI <- NMI(x.seurat$seurat_clusters, as.factor(label))\n```\nWe then perform cell lustering using `Seurat` on the imputed results. Similarly, **ARI** and **NMI** are used to evaluate the consistency between the results of `Seurat` and the reference labels of cells.\n",
    "created" : 1639056259019.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3556157835",
    "id" : "FDA423D",
    "lastKnownWriteTime" : 1639056267,
    "last_content_update" : 1639056267913,
    "path" : "~/Desktop/scMOO/pkg/vignettes/scMOO-tutorial.Rmd",
    "project_path" : "pkg/vignettes/scMOO-tutorial.Rmd",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}